#define THRESHOLD      330
#define DEBOUNCE_TIME  220
#define COLUMN         16
#define ROW            16

#define _TOP           1
#define _LEFT          2
#define TOP_LEFT       3

boolean toggel[ROW][COLUMN] = false;
short int labels[ROW][COLUMN] = 0;
short int linked[ROW][COLUMN] = 0;
short int curentLabel = 1;


//////////////////// algorithm TwoPass(data)

void ConnectedComponents(){

   // First pass
    for( int row=0; row<ROW; row++ ){
      for( int column=0; column<COLUMN; column++ ){
      // if curentValue is true
      if( toggel[row][column] == true ){ // toggel is true : KEY IN FREE
          // if left pixel is connected with the current pixel
          if( collumn > 0 && toggel[row][column-1] == true ){
            labels[row][column] = curentLabel; // temporary label
            linked[row][column] = _LEFT;        // equivalence classe
          }
          // if top pixel is connected with the current pixel
          if( row > 0 && toggel[row-1][column] == true ){
            labels[row][column] = curentLabel;  // temporary label
            linked[row][column] = _TOP;         // equivalence classe
          }
          // if left and top pixels are not connected with the current pixel
          if( row > 0 && collumn > 0 ){
            if( toggel[row][column-1] == false && toggel[row-1][column] == false ){
              labels[row][column] = curentLabel++; // create a new label
            }
          }
       
      if( values[row][column] <= THRESHOLD && toggel[row][column] == true ){
        // Find the smallest label
          L = neighbors labels
          labels[row][column] = min(L);
          for label in L
          linked[label] = union(linked[label], L)
      }
   }
   
   // Second pass
   
   for row in data
       for column in row
           if data[row][column] is not Background         
               labels[row][column] = find(labels[row][column])      
      
   return labels;


}
