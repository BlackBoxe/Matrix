//////////////////// algorithm TwoPass

#define COLS           16
#define ROWS           16

boolean toggel[ROWS][COLS];
short int labels[ROWS][COLS];
short int linked[ROWS][COLS];

short int curentLabel = 1;

void setup(){
  for( int rows=0; rows<ROWS; rows++ ){
    for( int cols=0; cols<COLS; cols++ ){
      labels[rows][cols] = 0;
    }
  }
}

void loop(){

  //////////////////// First pass
  for( int rows=1; rows<ROWS; rows++ ){
    for( int cols=1; cols<COLS; cols++ ){

      if( toggel[rows][cols] == true ){                                       // if curentPixel is forground

        if( toggel[rows-1][cols] == false && toggel[rows][cols-1] == false ){ // if curentPixel do not have neighbors
          curentLabel++;                                                      // create a new label
        }
        if( labels[rows-1][cols] != 0 ){                                      // if the top neighbor is labelised take it's label
          labels[rows][cols] = linked[rows-1][cols];
        }
        else {
          labels[rows][cols] = curentLabel;                                   // set the curentLabel
        }
      }

    }  // for loop
  }    // for loop

  //////////////////// Second pass
  for( int rows=ROWS-1; rows>=0; rows-- ){
    for( int cols=COLS-1; cols>=0; cols-- ){

      if( toggel[rows][cols] == true ){                                       // if curentPixel is forground

        if( labels[rows][cols-1] < labels[rows][cols] ){
          labels[rows][cols] = labels[rows][cols-1];
        }
      }

    }  // for loop
  }    // for loop

}


