#define THRESHOLD      330
#define DEBOUNCE_TIME  220
#define COLUMN         16
#define ROW            16

#define NORTH           1
#define WEST            2
#define NORTH_WEST      3

boolean toggel[ROW][COLUMN] = false;
short int labels[ROW][COLUMN] = 0;
short int linked[ROW][COLUMN] = 0;
short int curentLabel = 1;


//////////////////// algorithm TwoPass(data)

void ConnectedComponents(){

  //////////////////// First pass
  for( int row=0; row<ROW; row++ ){
    for( int column=0; column<COLUMN; column++ ){

      if( toggel[row][column] == true ){            // if key is pressed
        labelToggel = true;                         // init the labelToggel
        
        labels[row][column] = curentLabel;          // temporary label
        
        if( labels[row -1][column] < curentLabel || labels[row ][column -1] < curentLabel ){
          labels[row][column] = min( labels[row -1][column], labels[row][column] );    //
          curentLabel = labels[row][column];
        }
      }
      // if curentPixel is background
      if( toggel[row][column] == false && labelToggel == true ){
        labelToggel = false;
        curentLabel++; // create a new label
      }
    }
  }


  for( int row=1; row<ROW; row++ ){
    for( int column=1; column<COLUMN; column++ ){

      // if curentPixel is forground
        if( labels[row][column] != 0 && [row - 1][column] != 0 )          // if top pixel have the same label
          labels[row][column] = min(labels[row -1][column], labels[row][column]);    //
        }
              // if curentPixel is forground
        if( labels[row][column] != 0 && [row][column-1] != 0 )          // if top pixel have the same label
          labels[row][column] = min(labels[row][column-1], labels[row][column]);    //
        }

        if( toggel[row][column-1] == true ){       // if top pixel is connected with the current pixel
          labels[row][column] = labels[row-1][column];        // take temporary neighbors label
          linked[row][column] = NORTH;                        // equivalence classe
        }




        // Find the smallest label

        L = neighbors labels
          labels[row][column] = min(L);
        for label in L
          linked[label] = union(linked[label], L)
        }
        if( toggel[row][column] == false ){
        }
    }
  }

  ////////////////////  Second pass
  for( int row=0; row<ROW; row++ ){
    for( int column=0; column<COLUMN; column++ ){
      if( data[row][column] == false ){
        labels[row][column] = find( labels[row][column] );      
      }
    }
  }
}



